## cmake/target.cmake --- target manipulating utilities
##
## Copyright (c) 2017 ChienYu Lin
##
## Author: ChienYu Lin <cy20lin@gmail.com>
## License: MIT
##

set(TARGET_DATA_TYPES 
  PROPERTIES
  FEATURES
  OPTIONS
  DEFINITIONS
  INCLUDES
  LIBRARIES
  SOURCES
  )

function(sweet_target_create target type)
  if(TARGET "${target}")
    message(AUTHOR_WARNING "in function 'target_create': target '${target}' is already defined.")
    return()
  endif()
  if(type STREQUAL "EXECUTABLE" OR type STREQUAL "add_executable")
    add_executable(${target} ${ARGN} "")
  elseif(type STREQUAL "LIBRARY" OR type STREQUAL "add_library")
    add_library(${target} ${ARGN} "")
    foreach(subtype STATIC SHARED MODULE)
      if(ARGV2 STREQUAL "${subtype}")
        set(type "${subtype}_LIBRARY")
        set("${target}_EXPORT_CONFIG_SETTINGS" "LIBRARIES\;${target}" PARENT_SCOPE)
        break()
      endif()
    endforeach()
    if(type STREQUAL "" AND ARGV2 STREQUAL "OBJECT")
      set(type "OBJECT_LIBRARY")
      set("${target}_EXPORT_CONFIG_SETTINGS" "SOURCES\;PRIVATE\;$<TARGET_OBJECTS:${target_name}>" PARENT_SCOPE)
      break()
    endif()
    if(type STREQUAL "")
      foreach(subtype ALIAS UNKNOWN)
        if(ARGV2 STREQUAL "${subtype}")
          set(type "${subtype}_LIBRARY")
          break()
        endif()
      endforeach()
    endif()
    if(type STREQUAL "")
      set(type "STATIC_LIBRARY")
    endif()
  elseif(type STREQUAL "CUSTOM" OR type STREQUAL "add_custom_target")
    add_custom_target(${target} ${ARGN} "")
    set("${target}_EXPORT_CONFIG_SETTINGS" "${target}" PARENT_SCOPE)
  elseif(type STREQUAL "STATIC_LIBRARY")
    add_library(${target} STATIC ${ARGN} "")
    set("${target}_EXPORT_CONFIG_SETTINGS" "LIBRARIES\;${target}" PARENT_SCOPE)
  elseif(type STREQUAL "SHARED_LIBRARY")
    add_library(${target} SHARED ${ARGN} "")
    set("${target}_EXPORT_CONFIG_SETTINGS" "LIBRARIES\;${target}" PARENT_SCOPE)
  elseif(type STREQUAL "MODULE_LIBRARY")
    add_library(${target} MODULE ${ARGN} "")
    set("${target}_EXPORT_CONFIG_SETTINGS" "LIBRARIES\;${target}" PARENT_SCOPE)
  elseif(type STREQUAL "INTERFACE_LIBRARY") 
    add_library(${target} INTERFACE ${ARGN} "")
  elseif(type STREQUAL "OBJECT_LIBRARY")
    add_library(${target} OBJECT ${ARGN} "")
    set("${target}_EXPORT_CONFIG_SETTINGS" "SOURCES\;PRIVATE\;$<TARGET_OBJECTS:${target_name}>" PARENT_SCOPE)
  elseif(type STREQUAL "UNKNOWN_LIBRARY")
    add_library(${target} UNKNOWN ${ARGN} "")
  elseif(type STREQUAL "ALIAS_LIBRARY")
    add_library(${target} ALIAS ${ARGN} "")
  else()
    message(FATAL_ERROR "in function 'target_create': wrong target type")
  endif()
  set("${target}_TYPE" "TARGET" PARENT_SCOPE)
  set("${target}_TARGET_TYPE" "${type}" PARENT_SCOPE)
  set("${target}_TARGET_NAME" "${target}" PARENT_SCOPE)
endfunction()

function(__sweet_target_add__atom target data_type)

  if(ARGN STREQUAL "")
    return()
  elseif(data_type STREQUAL "NOTHING")
    return()
  endif()
  if (data_type STREQUAL "PROPERTIES" )
    if ("${ARGV2}" STREQUAL "PROPERTIES")
      set_target_properties("${target}" ${ARGN})
    else()
      set_target_properties("${target}" PROPERTIES ${ARGN})
    endif()
  elseif (data_type STREQUAL "SOURCES")
    target_sources("${target}" ${ARGN})
  elseif (data_type STREQUAL "INCLUDES")
    target_include_directories("${target}" ${ARGN} "")
  elseif (data_type STREQUAL "LIBRARIES")
    target_link_libraries("${target}" ${ARGN})
  elseif (data_type STREQUAL "DEFINITIONS")
    target_compile_definitions("${target}" ${ARGN})
  elseif (data_type STREQUAL "FEATURES")
    target_compile_features("${target}" ${ARGN})
  elseif (data_type STREQUAL "OPTIONS")
    add_compile_options("${target}" ${ARGN})
  elseif (data_type STREQUAL "DEPENDENCIES")
    add_dependencies("${target}" ${ARGN})
  elseif (data_type STREQUAL "CUSTOM_COMMAND")
    add_custom_command(TARGET "${target}" ${ARGN})
  else()
    message(FATAL_ERROR "in function 'target_add': wrong target data type")
  endif()
endfunction()

function(__sweet_target_use__targets target)
  foreach(target_ IN LISTS ARGN)
    if("${target}" STREQUAL "${target_}")
      message(AUTHOR_WARNING "__target_use__targets: target '${target}' references itself.")
    endif()
    foreach(args IN LISTS "${target_}_EXPORT_CONFIG_SETTINGS")
      __sweet_target_add__atom("${target}" ${args})
    endforeach()
  endforeach()
endfunction()

function(__sweet_target_use__configs target)
  foreach(config IN LISTS ARGN)
    foreach(args IN LISTS "${config}_CONFIG_SETTINGS")
      # __sweet_target_add__atom("${target}" ${args})
      __sweet_target_add__compound("${target}" ${args})
    endforeach()
  endforeach()
endfunction()

function(__sweet_target_use__packages target)
  foreach(package IN LISTS ARGN)
    if(${package}_FOUND)
      set("${package}_INCLUDES" SYSTEM ${${package}_INCLUDES})
      foreach(data_type IN LISTS TARGET_DATA_TYPES)
          __sweet_target_add__atom("${target}" "${data_type}" ${${package}_${data_type}})
        endif()
      endforeach()
    else()
      message(AUTHOR_WARNING "package: '${package}' not found.")
    endif()
  endforeach()
endfunction()

function(__sweet_target_use target)
  foreach(object IN LISTS ARGN)
    if(DEFINED ${object}_FOUND)
      __sweet_target_use__packages("${target}" "${object}")
    elseif(DEFINED ${object}_CONFIG_SETTINGS)
      __sweet_target_use__configs("${target}" "${object}")
    elseif(DEFINED ${object}_TARGET_NAME)
      __sweet_target_use__targets("${target}" "${object}")
    endif()
  endforeach()
endfunction()

function(__sweet_target_add__compound target type)
  # message(STATUS "[sweet] sweet_target_add__compound(${ARGV})")
  if (type STREQUAL "PACKAGES")
    __sweet_target_use__packages("${target}" ${ARGN})
  elseif (type STREQUAL "CONFIGS")
    __sweet_target_use__configs("${target}" ${ARGN})
  elseif (type STREQUAL "SWEET_TARGETS")
    __sweet_target_use__targets("${target}" ${ARGN})
  elseif (type STREQUAL "AUTO")
    __sweet_target_use("${target}" ${ARGN})
  else()
    __sweet_target_add__atom("${target}" "${type}" ${ARGN})
  endif()
endfunction()


function(sweet_target_add target type)
  # message(STATUS "[sweet] sweet_target_add(${ARGV})")
  if (type STREQUAL "CONFIGURE")
    string(CONFIGURE "${ARGN}" ARGN)
    __sweet_target_add__compound("${target}" ${ARGN})
  else()
    __sweet_target_add__compound("${target}" "${type}" ${ARGN})
  endif()
endfunction()

